import sys
import os
import time
from datetime import datetime

def verificar_dependencias():
    """Verifica se todas as depend√™ncias est√£o instaladas"""
    dependencias = {
        'pandas': 'pd',
        'numpy': 'np', 
        'matplotlib.pyplot': 'plt',
        'seaborn': 'sns'
    }
    
    faltando = []
    for dep, alias in dependencias.items():
        try:
            __import__(dep.split('.')[0])
        except ImportError:
            faltando.append(dep.split('.')[0])
    
    if faltando:
        print(f"‚ùå Depend√™ncias faltando: {', '.join(faltando)}")
        print("Instale com: pip install pandas numpy matplotlib seaborn openpyxl")
        return False
    
    print("‚úÖ Todas as depend√™ncias est√£o dispon√≠veis.")
    return True

def verificar_arquivos_dados():
    """Verifica se todos os arquivos de dados est√£o presentes"""
    pasta_dados = 'dados'
    arquivos_necessarios = [
        'disciplinas.xlsx',
        'professores.xlsx', 
        'salas.xlsx',
        'turmas.xlsx',
        'disponibilidade.xlsx'
    ]
    
    if not os.path.exists(pasta_dados):
        print(f"‚ùå Pasta '{pasta_dados}/' n√£o encontrada!")
        print("Crie a pasta 'dados/' e coloque os arquivos Excel dentro dela.")
        return False
    
    arquivos_faltando = []
    for arquivo in arquivos_necessarios:
        caminho_completo = os.path.join(pasta_dados, arquivo)
        if not os.path.exists(caminho_completo):
            arquivos_faltando.append(arquivo)
    
    if arquivos_faltando:
        print(f"‚ùå Arquivos faltando na pasta '{pasta_dados}/': {', '.join(arquivos_faltando)}")
        return False
    
    print("‚úÖ Todos os arquivos de dados encontrados.")
    return True

def executar_v1_penalizacao():
    """Executa vers√£o V1 - Penaliza√ß√£o com Lista"""
    print("\n" + "="*60)
    print("üî∏ EXECUTANDO V1 - PENALIZA√á√ÉO COM LISTA DE EVENTOS")
    print("="*60)
    
    try:
        from genetic_scheduler import ScheduleGA
        
        print("Configurando algoritmo...")
        ga = ScheduleGA()
        ga.populacao_size = 50
        ga.geracoes = 300
        ga.taxa_mutacao = 0.12
        ga.taxa_crossover = 0.8
        
        print("Par√¢metros:")
        print(f"  ‚Ä¢ Popula√ß√£o: {ga.populacao_size}")
        print(f"  ‚Ä¢ Gera√ß√µes: {ga.geracoes}")
        print(f"  ‚Ä¢ Muta√ß√£o: {ga.taxa_mutacao}")
        print(f"  ‚Ä¢ Crossover: {ga.taxa_crossover}")
        
        inicio = time.time()
        melhor_solucao, fitness, historico = ga.executar()
        tempo_total = time.time() - inicio
        
        print(f"\n‚è±Ô∏è  Tempo total: {tempo_total:.2f} segundos")
        print(f"üéØ Fitness final: {fitness:.2f}")
        
        # Exibir solu√ß√£o
        ga.exibir_horario(melhor_solucao)
        
        # Salvar resultado
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # Criar pasta resultados se n√£o existir
        if not os.path.exists('resultados'):
            os.makedirs('resultados')
        
        # Importar fun√ß√£o de salvamento
        from visualization_script import salvar_horario_excel
        filename = f"v1_penalizacao_{timestamp}.xlsx"
        caminho_salvo = salvar_horario_excel(melhor_solucao, ga, filename)
        
        print(f"üíæ Resultado V1 salvo em: {caminho_salvo}")
        
        return melhor_solucao, fitness, historico, ga
        
    except ImportError as e:
        print(f"‚ùå Erro ao importar V1: {e}")
        print("Certifique-se de que o arquivo 'genetic_scheduler.py' est√° presente.")
        return None
    except Exception as e:
        print(f"‚ùå Erro durante execu√ß√£o V1: {e}")
        return None

def executar_v2_pontuacao():
    """Executa vers√£o V2 - Pontua√ß√£o com Agenda"""
    print("\n" + "="*60)
    print("üîπ EXECUTANDO V2 - PONTUA√á√ÉO COM AGENDA (MATRIZ)")
    print("="*60)
    
    try:
        from genetic_scheduler_v2 import ScheduleGA_V2
        
        print("Configurando algoritmo...")
        ga = ScheduleGA_V2()
        ga.populacao_size = 50
        ga.geracoes = 300
        ga.taxa_mutacao = 0.15
        ga.taxa_crossover = 0.8
        
        print("Par√¢metros:")
        print(f"  ‚Ä¢ Popula√ß√£o: {ga.populacao_size}")
        print(f"  ‚Ä¢ Gera√ß√µes: {ga.geracoes}")
        print(f"  ‚Ä¢ Muta√ß√£o: {ga.taxa_mutacao}")
        print(f"  ‚Ä¢ Crossover: {ga.taxa_crossover}")
        
        print("\nPesos de pontua√ß√£o:")
        for criterio, peso in ga.pesos.items():
            print(f"  ‚Ä¢ {criterio}: {peso}")
        
        inicio = time.time()
        melhor_agenda, fitness, historico = ga.executar()
        tempo_total = time.time() - inicio
        
        print(f"\n‚è±Ô∏è  Tempo total: {tempo_total:.2f} segundos")
        print(f"üéØ Fitness final: {fitness:.0f} pontos")
        
        # Exibir solu√ß√£o
        ga.exibir_agenda(melhor_agenda)
        
        # Salvar resultado usando utilit√°rios V2
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # Criar pasta resultados se n√£o existir
        if not os.path.exists('resultados'):
            os.makedirs('resultados')
        
        # Salvar usando fun√ß√£o espec√≠fica para V2
        try:
            from utils_v2 import salvar_agenda_excel, gerar_relatorio_agenda_v2
            filename = f"v2_pontuacao_{timestamp}.xlsx"
            caminho_salvo = salvar_agenda_excel(melhor_agenda, ga, filename)
            
            # Gerar relat√≥rio detalhado
            print("\nüìä Gerando relat√≥rio detalhado...")
            metricas = gerar_relatorio_agenda_v2(melhor_agenda, fitness, historico, ga)
            
            print(f"üíæ Resultado V2 salvo em: {caminho_salvo}")
            print(f"üìà Score de qualidade: {metricas['score_geral']:.1%}")
            
        except ImportError:
            print("‚ö†Ô∏è  Utilit√°rios V2 n√£o encontrados. Resultado n√£o foi salvo em Excel.")
            print("üíæ Resultado V2 exibido apenas na tela.")
        
        return melhor_agenda, fitness, historico, ga
        
    except ImportError as e:
        print(f"‚ùå Erro ao importar V2: {e}")
        print("Certifique-se de que o arquivo 'genetic_scheduler_v2.py' est√° presente.")
        return None
    except Exception as e:
        print(f"‚ùå Erro durante execu√ß√£o V2: {e}")
        return None

def executar_comparacao():
    """Executa compara√ß√£o entre V1 e V2"""
    print("\n" + "="*60)
    print("üî¨ EXECUTANDO COMPARA√á√ÉO ENTRE ABORDAGENS")
    print("="*60)
    
    try:
        from comparison_v1_v2 import executar_comparacao_completa
        return executar_comparacao_completa()
    except ImportError as e:
        print(f"‚ùå Erro ao importar compara√ß√£o: {e}")
        print("Certifique-se de que o arquivo 'comparison_v1_v2.py' est√° presente.")
        return None
    except Exception as e:
        print(f"‚ùå Erro durante compara√ß√£o: {e}")
        return None

def executar_otimizacao_parametros():
    """Executa otimiza√ß√£o de par√¢metros"""
    print("\n" + "="*60)
    print("‚öôÔ∏è  EXECUTANDO OTIMIZA√á√ÉO DE PAR√ÇMETROS")
    print("="*60)
    
    print("Escolha a vers√£o para otimizar:")
    print("1. V1 - Penaliza√ß√£o com Lista")
    print("2. V2 - Pontua√ß√£o com Agenda")
    print("3. Comparar par√¢metros de ambas")
    
    try:
        opcao = input("Op√ß√£o (1-3): ").strip()
        
        if opcao == "1":
            print("Otimizando par√¢metros para V1 - Penaliza√ß√£o...")
            from parameter_optimization import executar_teste_rapido_v1
            return executar_teste_rapido_v1()
            
        elif opcao == "2":
            print("Otimizando par√¢metros para V2 - Pontua√ß√£o...")
            from parameter_optimization import executar_teste_rapido_v2
            return executar_teste_rapido_v2()
            
        elif opcao == "3":
            print("Comparando par√¢metros entre V1 e V2...")
            from parameter_optimization import comparar_parametros_v1_v2
            return comparar_parametros_v1_v2()
            
        else:
            print("‚ùå Op√ß√£o inv√°lida!")
            return None
            
    except ImportError as e:
        print(f"‚ùå Erro ao importar otimiza√ß√£o: {e}")
        return None
    except Exception as e:
        print(f"‚ùå Erro durante otimiza√ß√£o: {e}")
        return None

def menu_principal():
    """Menu principal do sistema integrado"""
    while True:
        print("\n" + "="*80)
        print("üéì SISTEMA INTEGRADO - HOR√ÅRIOS ACAD√äMICOS COM AG")
        print("="*80)
        print("Escolha a abordagem ou fun√ß√£o desejada:")
        print()
        print("üìã EXECU√á√ÉO DAS ABORDAGENS:")
        print("1. V1 - Penaliza√ß√£o com Lista de Eventos")
        print("2. V2 - Pontua√ß√£o com Agenda (Matriz)")
        print("3. Compara√ß√£o entre V1 e V2")
        print()
        print("‚öôÔ∏è  FERRAMENTAS AVAN√áADAS:")
        print("4. Otimiza√ß√£o de par√¢metros (V1, V2 ou Compara√ß√£o)")
        print("5. An√°lise completa com visualiza√ß√µes (V1)")
        print("6. An√°lise completa com visualiza√ß√µes (V2)")
        print("7. An√°lise detalhada de agenda (V2)")
        print()
        print("0. Sair")
        
        try:
            opcao = input("\nEscolha uma op√ß√£o (0-7): ").strip()
            
            if opcao == "1":
                resultado = executar_v1_penalizacao()
                if resultado:
                    print("\n‚úÖ V1 executado com sucesso!")
                    
            elif opcao == "2":
                resultado = executar_v2_pontuacao()
                if resultado:
                    print("\n‚úÖ V2 executado com sucesso!")
                    
            elif opcao == "3":
                resultado = executar_comparacao()
                if resultado:
                    print("\n‚úÖ Compara√ß√£o executada com sucesso!")
                    
            elif opcao == "4":
                resultado = executar_otimizacao_parametros()
                if resultado:
                    print("\n‚úÖ Otimiza√ß√£o executada com sucesso!")
                    
            elif opcao == "5":
                try:
                    from visualization_script import executar_analise_completa
                    print("\nüî¨ Executando an√°lise completa V1...")
                    resultado = executar_analise_completa()
                    if resultado:
                        print("\n‚úÖ An√°lise completa V1 executada com sucesso!")
                except ImportError:
                    print("‚ùå Arquivo 'visualization_script.py' n√£o encontrado.")
                except Exception as e:
                    print(f"‚ùå Erro durante an√°lise V1: {e}")
                    
            elif opcao == "6":
                try:
                    from visualization_v2 import executar_analise_completa_v2
                    print("\nüî¨ Executando an√°lise completa V2...")
                    resultado = executar_analise_completa_v2()
                    if resultado:
                        print("\n‚úÖ An√°lise completa V2 executada com sucesso!")
                except ImportError:
                    print("‚ùå Arquivo 'visualization_v2.py' n√£o encontrado.")
                except Exception as e:
                    print(f"‚ùå Erro durante an√°lise V2: {e}")
                    
            elif opcao == "7":
                try:
                    print("\nüî¨ Executando an√°lise detalhada V2...")
                    from genetic_scheduler_v2 import ScheduleGA_V2
                    from utils_v2 import gerar_relatorio_agenda_v2, salvar_agenda_excel
                    
                    ga_v2 = ScheduleGA_V2()
                    agenda, fitness, historico = ga_v2.executar()
                    
                    # Gerar relat√≥rio
                    metricas = gerar_relatorio_agenda_v2(agenda, fitness, historico, ga_v2)
                    
                    # Salvar resultado
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    filename = f"analise_detalhada_v2_{timestamp}.xlsx"
                    caminho_salvo = salvar_agenda_excel(agenda, ga_v2, filename)
                    
                    print(f"\n‚úÖ An√°lise V2 conclu√≠da!")
                    print(f"üìÑ Resultados salvos em: {caminho_salvo}")
                    print(f"üìä Score de qualidade: {metricas['score_geral']:.1%}")
                    
                except ImportError as e:
                    print(f"‚ùå Erro de importa√ß√£o: {e}")
                except Exception as e:
                    print(f"‚ùå Erro durante an√°lise V2: {e}")
                
            elif opcao == "0":
                print("\nüëã Obrigado por usar o sistema!")
                break
                
            else:
                print("‚ùå Op√ß√£o inv√°lida! Tente novamente.")
                
        except KeyboardInterrupt:
            print("\n\nüëã Sistema encerrado pelo usu√°rio.")
            break
        except Exception as e:
            print(f"‚ùå Erro inesperado: {e}")

def main():
    """Fun√ß√£o principal do sistema integrado"""
    print("üöÄ SISTEMA INTEGRADO - HOR√ÅRIOS ACAD√äMICOS COM AG")
    print("="*60)
    print(f"üìÖ Iniciado em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    
    # Verifica√ß√µes iniciais
    print("\nüîç Verificando sistema...")
    
    if not verificar_dependencias():
        print("‚ùå Sistema n√£o pode continuar sem as depend√™ncias.")
        return 1
    
    if not verificar_arquivos_dados():
        print("‚ùå Sistema n√£o pode continuar sem os arquivos de dados.")
        print("\nüìÅ Estrutura esperada:")
        print("   projeto/")
        print("   ‚îú‚îÄ‚îÄ dados/")
        print("   ‚îÇ   ‚îú‚îÄ‚îÄ disciplinas.xlsx")
        print("   ‚îÇ   ‚îú‚îÄ‚îÄ professores.xlsx")
        print("   ‚îÇ   ‚îú‚îÄ‚îÄ salas.xlsx")
        print("   ‚îÇ   ‚îú‚îÄ‚îÄ turmas.xlsx")
        print("   ‚îÇ   ‚îî‚îÄ‚îÄ disponibilidade.xlsx")
        print("   ‚îú‚îÄ‚îÄ genetic_scheduler.py")
        print("   ‚îú‚îÄ‚îÄ genetic_scheduler_v2.py")
        print("   ‚îî‚îÄ‚îÄ [outros arquivos .py]")
        return 1
    
    # Verificar m√≥dulos principais
    modulos_principais = [
        'genetic_scheduler.py',
        'genetic_scheduler_v2.py'
    ]
    
    modulos_faltando = []
    for modulo in modulos_principais:
        if not os.path.exists(modulo):
            modulos_faltando.append(modulo)
    
    if modulos_faltando:
        print(f"‚ö†Ô∏è  M√≥dulos principais faltando: {', '.join(modulos_faltando)}")
        print("Algumas funcionalidades podem n√£o estar dispon√≠veis.")
    else:
        print("‚úÖ Todos os m√≥dulos principais encontrados.")
    
    # Criar pasta de resultados se n√£o existir
    if not os.path.exists('resultados'):
        os.makedirs('resultados')
        print("üìÅ Pasta 'resultados/' criada.")
    
    print("\nüéØ Sistema pronto! Escolha uma das op√ß√µes no menu.")
    
    # Executar menu principal
    menu_principal()
    
    return 0

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
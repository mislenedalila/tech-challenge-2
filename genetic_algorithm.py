import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import json
import random
import time
from datetime import datetime, timedelta
import os
import warnings
from collections import defaultdict
warnings.filterwarnings('ignore')

# üé® Configura√ß√£o visual
plt.style.use('default')
try:
    sns.set_palette("husl")
except:
    pass

class CorretorDados:
    """üîß Classe para corrigir problemas nos dados"""
    
    def __init__(self):
        self.mapeamento_turnos = {
            'Noite': 'noturno',
            'Tarde': 'vespertino', 
            'Manh√£': 'matutino'
        }
        
        self.horarios_noturnos = ['18:50', '19:40', '20:30', '21:20']
        
    def converter_horario_decimal_para_string(self, horario_decimal):
        """üïê Converte hor√°rio decimal para string HH:MM"""
        try:
            # Converte decimal para horas e minutos
            horas = int(horario_decimal * 24)
            minutos = int((horario_decimal * 24 * 60) % 60)
            
            # Mapeia para hor√°rios noturnos espec√≠ficos
            if horas == 19 or (horas == 18 and minutos >= 50):
                return "18:50"
            elif horas == 20 or (horas == 19 and minutos >= 40):
                return "19:40"
            elif horas == 21 or (horas == 20 and minutos >= 30):
                return "20:30"
            elif horas == 22 or (horas == 21 and minutos >= 20):
                return "21:20"
            else:
                # Se n√£o mapeia, distribui nos hor√°rios dispon√≠veis
                return random.choice(self.horarios_noturnos)
                
        except:
            return "18:50"  # Fallback
    
    def corrigir_disponibilidade(self, df_disponibilidade):
        """üîß Corrige dados de disponibilidade"""
        df_corrigido = df_disponibilidade.copy()
        
        print("üîß Corrigindo dados de disponibilidade...")
        
        # 1. Corrigir nomes dos turnos
        df_corrigido['TURNO'] = df_corrigido['TURNO'].map(self.mapeamento_turnos)
        
        # 2. Corrigir hor√°rios decimais
        if df_corrigido['HORARIO'].dtype != 'object':
            df_corrigido['HORARIO'] = df_corrigido['HORARIO'].apply(
                self.converter_horario_decimal_para_string
            )
        
        # 3. Filtrar apenas registros noturnos
        df_noturno = df_corrigido[df_corrigido['TURNO'] == 'noturno'].copy()
        
        print(f"‚úÖ Dados corrigidos:")
        print(f"   Registros originais: {len(df_disponibilidade)}")
        print(f"   Registros noturnos corrigidos: {len(df_noturno)}")
        
        # 4. Se n√£o h√° registros noturnos suficientes, criar artificialmente
        if len(df_noturno) < 50:  # N√∫mero m√≠nimo necess√°rio
            df_noturno = self.criar_disponibilidade_artificial(df_corrigido)
        
        return df_noturno
    
    def criar_disponibilidade_artificial(self, df_original):
        """ü§ñ Cria disponibilidade artificial para todos os professores nos hor√°rios noturnos"""
        print("ü§ñ Criando disponibilidade artificial para hor√°rios noturnos...")
        
        # Pegar todos os professores √∫nicos
        professores_unicos = df_original['CODPROF'].unique()
        
        disponibilidade_artificial = []
        
        for prof in professores_unicos:
            for dia in ['Segunda', 'Ter√ßa', 'Quarta', 'Quinta', 'Sexta']:
                for horario in self.horarios_noturnos:
                    registro = {
                        'CHAPA': f"ART{prof}",
                        'CODPROF': prof,
                        'TURNO': 'noturno',
                        'DIADASEMANA': dia,
                        'HORARIO': horario
                    }
                    disponibilidade_artificial.append(registro)
        
        df_artificial = pd.DataFrame(disponibilidade_artificial)
        print(f"‚úÖ Criados {len(df_artificial)} registros artificiais de disponibilidade")
        
        return df_artificial

class GeneticScheduleOptimizer:
    """
    üß¨ Algoritmo Gen√©tico CORRIGIDO para Hor√°rios Escolares
    
    Caracter√≠sticas principais:
    - Popula√ß√£o mista com cria√ß√£o flex√≠vel
    - Fun√ß√£o fitness menos rigorosa
    - Corre√ß√£o autom√°tica de dados
    - Converg√™ncia melhorada
    """
    
    def __init__(self):
        """Inicializa o otimizador com par√¢metros corrigidos"""
        
        # üîß Par√¢metros do Algoritmo Gen√©tico CORRIGIDOS
        self.tamanho_populacao = 60       # Reduzido para teste
        self.taxa_mutacao = 0.25          # Aumentado para mais diversidade
        self.taxa_crossover = 0.8
        self.taxa_elitismo = 0.1
        self.max_geracoes = 200           # Reduzido para teste inicial
        
        # üïí Especifica√ß√µes de Hor√°rio Noturno
        self.horarios_noturnos = ['18:50', '19:40', '20:30', '21:20']
        self.dias_semana = ['Segunda', 'Ter√ßa', 'Quarta', 'Quinta', 'Sexta']
        
        # üìä Dados carregados
        self.disciplinas = None
        self.professores = None
        self.salas = None
        self.turmas = None
        self.disponibilidade = None
        
        # üéØ Controle de evolu√ß√£o
        self.historico_fitness = []
        self.melhor_solucao = None
        self.melhor_fitness = float('inf')
        self.geracoes_sem_melhoria = 0
        self.max_geracoes_sem_melhoria = 30
        
        # üîß Corretor de dados
        self.corretor = CorretorDados()
        
        print("üöÄ TECH CHALLENGE - ALGORITMO GEN√âTICO CORRIGIDO")
        print("üìä Vers√£o corrigida para resolver FITNESS = 28800")
        print("üéØ Restri√ß√µes: Disciplinas 2+ aulas em dias diferentes")
        print("‚ö° Foco: Minimizar conflitos e maximizar ocupa√ß√£o")
        print("=" * 60)
    
    def carregar_e_processar_dados_corrigidos(self):
        """üìÇ Vers√£o corrigida do carregamento de dados"""
        try:
            print("üìÇ Carregando dados...")
            
            # Verificar se pasta existe
            if not os.path.exists('dados'):
                raise FileNotFoundError("Pasta 'dados' n√£o encontrada!")
            
            # Carregar dados normalmente
            self.disciplinas = pd.read_excel('dados/disciplinas.xlsx')
            self.professores = pd.read_excel('dados/professores.xlsx')
            self.salas = pd.read_excel('dados/salas.xlsx')
            self.turmas = pd.read_excel('dados/turmas.xlsx')
            disponibilidade_raw = pd.read_excel('dados/disponibilidadeProfessor.xlsx')
            
            # üîß CORRE√á√ÉO: Usar corretor para dados de disponibilidade
            self.disponibilidade = self.corretor.corrigir_disponibilidade(disponibilidade_raw)
            
            print("‚úÖ Dados carregados e corrigidos!")
            print(f"   üìö {len(self.disciplinas)} disciplinas")
            print(f"   üë®‚Äçüè´ {len(self.professores)} professores") 
            print(f"   üéì {len(self.turmas)} turmas")
            print(f"   üè´ {len(self.salas)} salas")
            print(f"   üïí {len(self.disponibilidade)} registros disponibilidade corrigidos")
            
            return self.processar_dados_corrigidos()
            
        except Exception as e:
            print(f"‚ùå Erro: {e}")
            return False

    def processar_dados_corrigidos(self):
        """üîß Vers√£o corrigida do processamento"""
        try:
            # Processar habilita√ß√µes dos professores
            for idx, row in self.professores.iterrows():
                if pd.notna(row['DISCIPLINASHABILITADAS']):
                    # üîß CORRE√á√ÉO: Dividir por ponto-e-v√≠rgula ou v√≠rgula
                    habilitacoes = []
                    if ';' in str(row['DISCIPLINASHABILITADAS']):
                        habilitacoes = [h.strip() for h in str(row['DISCIPLINASHABILITADAS']).split(';')]
                    elif ',' in str(row['DISCIPLINASHABILITADAS']):
                        habilitacoes = [h.strip() for h in str(row['DISCIPLINASHABILITADAS']).split(',')]
                    else:
                        habilitacoes = [str(row['DISCIPLINASHABILITADAS']).strip()]
                    
                    self.professores.at[idx, 'habilitacoes_lista'] = habilitacoes
                else:
                    self.professores.at[idx, 'habilitacoes_lista'] = []
            
            # üîß CORRE√á√ÉO: Calcular aulas baseado na carga hor√°ria
            self.total_aulas = 0
            self.disciplinas_info = []
            
            for _, disciplina in self.disciplinas.iterrows():
                # Assumir que cada aula tem 2h (padr√£o universit√°rio)
                aulas_por_semana = int(disciplina['CARGAHORARIA'] / 2)
                if aulas_por_semana == 0:
                    aulas_por_semana = 1  # M√≠nimo 1 aula
                
                # Contar quantas turmas t√™m esta disciplina
                turmas_disciplina = len(self.turmas[self.turmas['CODDISC'] == disciplina['CODDISC']])
                
                total_aulas_disciplina = aulas_por_semana * turmas_disciplina
                self.total_aulas += total_aulas_disciplina
                
                # Armazenar informa√ß√µes processadas
                self.disciplinas_info.append({
                    'codigo': disciplina['CODDISC'],
                    'nome': disciplina['NOME'],
                    'aulas_por_semana': aulas_por_semana,
                    'turmas': turmas_disciplina,
                    'total_aulas': total_aulas_disciplina
                })
            
            print(f"üîß Processando dados...")
            print(f"‚úÖ Processamento corrigido: {self.total_aulas} aulas para alocar")
            
            # Mostrar distribui√ß√£o de aulas
            print(f"üìä Distribui√ß√£o de aulas:")
            for info in self.disciplinas_info[:5]:  # Mostrar primeiras 5
                print(f"   {info['nome']}: {info['aulas_por_semana']} aulas √ó {info['turmas']} turmas = {info['total_aulas']}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro no processamento: {e}")
            return False

    def calcular_fitness_corrigido(self, individuo):
        """üìä Fun√ß√£o de fitness corrigida e menos rigorosa"""
        if not individuo:
            return 999999
        
        fitness = 0
        
        # Estruturas para detectar conflitos
        ocupacao_professor = {}
        ocupacao_sala = {}
        ocupacao_turma = {}
        disciplinas_por_turma_dia = {}
        
        for aula in individuo:
            prof_id = aula.get('professor')
            sala_id = aula.get('sala')
            turma = aula.get('turma')
            dia = aula.get('dia')
            horario = aula.get('horario')
            disciplina = aula.get('disciplina')
            
            if not all([prof_id, sala_id, turma, dia, horario, disciplina]):
                continue
            
            # Chaves √∫nicas para detectar conflitos
            chave_prof = (prof_id, dia, horario)
            chave_sala = (sala_id, dia, horario)
            chave_turma = (turma, dia, horario)
            chave_disc_turma_dia = (turma, disciplina, dia)
            
            # Contar ocupa√ß√µes
            ocupacao_professor[chave_prof] = ocupacao_professor.get(chave_prof, 0) + 1
            ocupacao_sala[chave_sala] = ocupacao_sala.get(chave_sala, 0) + 1
            ocupacao_turma[chave_turma] = ocupacao_turma.get(chave_turma, 0) + 1
            disciplinas_por_turma_dia[chave_disc_turma_dia] = disciplinas_por_turma_dia.get(chave_disc_turma_dia, 0) + 1
        
        # üîß CORRE√á√ÉO: Penaliza√ß√µes mais brandas
        # Conflitos de professor (peso reduzido)
        conflitos_prof = sum(max(0, ocupacao - 1) for ocupacao in ocupacao_professor.values())
        fitness += conflitos_prof * 300  # Era 1000
        
        # Conflitos de sala (peso reduzido)  
        conflitos_sala = sum(max(0, ocupacao - 1) for ocupacao in ocupacao_sala.values())
        fitness += conflitos_sala * 200  # Era 800
            
        # Conflitos de turma (peso mantido, √© cr√≠tico)
        conflitos_turma = sum(max(0, ocupacao - 1) for ocupacao in ocupacao_turma.values())
        fitness += conflitos_turma * 500  # Era 900
        
        # üîß CORRE√á√ÉO: Penaliza√ß√£o menor para disciplinas no mesmo dia
        conflitos_mesmo_dia = sum(max(0, ocupacao - 1) for ocupacao in disciplinas_por_turma_dia.values())
        fitness += conflitos_mesmo_dia * 100  # Era 500
        
        # B√¥nus por aulas alocadas (incentiva solu√ß√µes com mais aulas)
        bonus_aulas = len(individuo) * 5
        fitness -= bonus_aulas
        
        return max(0, fitness)  # Fitness n√£o pode ser negativo

    def escolher_professor_habilitado_flexivel(self, nome_disciplina):
        """üë®‚Äçüè´ Escolha flex√≠vel de professor"""
        
        # Buscar por c√≥digo da disciplina nas habilita√ß√µes
        disciplina_info = self.disciplinas[self.disciplinas['NOME'] == nome_disciplina]
        if disciplina_info.empty:
            return self.professores.iloc[0]['CODPROF']  # Fallback
        
        codigo_disciplina = disciplina_info.iloc[0]['CODDISC']
        
        # Procurar professor habilitado
        for _, professor in self.professores.iterrows():
            habilitacoes = professor.get('habilitacoes_lista', [])
            if codigo_disciplina in habilitacoes:
                return professor['CODPROF']
        
        # Se n√£o encontrar, usar primeiro professor
        return self.professores.iloc[0]['CODPROF']

    def escolher_dia_horario_flexivel(self, ocupacao_turma, disciplina_multiplas_aulas):
        """üóìÔ∏è Escolha flex√≠vel de dia e hor√°rio"""
        
        dias_disponiveis = self.dias_semana.copy()
        
        # Se disciplina tem m√∫ltiplas aulas, preferir dias diferentes
        if disciplina_multiplas_aulas:
            dias_ocupados = [dia for dia, horarios in ocupacao_turma.items() if len(horarios) > 0]
            dias_livres = [dia for dia in self.dias_semana if dia not in dias_ocupados]
            if dias_livres:
                dias_disponiveis = dias_livres
        
        # Escolher primeiro dia e hor√°rio dispon√≠veis
        for dia in dias_disponiveis:
            for horario in self.horarios_noturnos:
                if horario not in ocupacao_turma.get(dia, []):
                    return dia, horario
        
        # Fallback: usar primeiro dia e hor√°rio
        return self.dias_semana[0], self.horarios_noturnos[0]

    def criar_individuo_mais_flexivel(self):
        """üß¨ Cria√ß√£o de indiv√≠duo mais flex√≠vel"""
        individuo = []
        
        # Estruturas de controle b√°sicas
        ocupacao_turma = {}
        
        # Processar cada disciplina
        for _, disciplina in self.disciplinas.iterrows():
            codigo_disc = disciplina['CODDISC']
            nome_disc = disciplina['NOME']
            carga_horaria = disciplina['CARGAHORARIA']
            
            # Calcular n√∫mero de aulas por semana
            aulas_por_semana = int(carga_horaria / 2)
            if aulas_por_semana == 0:
                aulas_por_semana = 1  # M√≠nimo 1 aula
            
            # Buscar turmas que cursam esta disciplina
            turmas_disciplina = self.turmas[self.turmas['CODDISC'] == codigo_disc]
            
            for _, turma in turmas_disciplina.iterrows():
                codigo_turma = turma['CODTURMA']
                
                # Inicializar controle da turma
                if codigo_turma not in ocupacao_turma:
                    ocupacao_turma[codigo_turma] = {dia: [] for dia in self.dias_semana}
                
                for aula_num in range(aulas_por_semana):
                    # üîß CORRE√á√ÉO: Escolha mais flex√≠vel de recursos
                    
                    # Escolher professor (primeiro habilitado encontrado)
                    professor_id = self.escolher_professor_habilitado_flexivel(nome_disc)
                    
                    # Escolher sala (rotacionar entre salas dispon√≠veis)
                    sala_idx = (len(individuo)) % len(self.salas)
                    sala_id = self.salas.iloc[sala_idx]['CODSALA']
                    
                    # Escolher dia e hor√°rio (evitando conflitos b√°sicos de turma)
                    dia, horario = self.escolher_dia_horario_flexivel(
                        ocupacao_turma[codigo_turma], 
                        aulas_por_semana > 1
                    )
                    
                    if dia and horario and professor_id:
                        gene = {
                            'disciplina': codigo_disc,
                            'nome_disciplina': nome_disc,
                            'turma': codigo_turma,
                            'professor': professor_id,
                            'sala': sala_id,
                            'dia': dia,
                            'horario': horario,
                            'aula_numero': aula_num + 1
                        }
                        
                        individuo.append(gene)
                        ocupacao_turma[codigo_turma][dia].append(horario)
        
        return individuo

    def criar_populacao_inicial(self):
        """üß¨ Cria popula√ß√£o inicial com m√©todo corrigido"""
        populacao = []
        
        print(f"üß¨ Criando popula√ß√£o inicial de {self.tamanho_populacao} indiv√≠duos...")
        
        for i in range(self.tamanho_populacao):
            if (i + 1) % 10 == 0:
                print(f"   Criando indiv√≠duo {i+1}/{self.tamanho_populacao}")
            
            individuo = self.criar_individuo_mais_flexivel()
            populacao.append(individuo)
        
        # Calcular fitness da popula√ß√£o inicial
        fitness_inicial = [self.calcular_fitness_corrigido(ind) for ind in populacao]
        melhor_fitness_inicial = min(fitness_inicial)
        media_fitness_inicial = sum(fitness_inicial) / len(fitness_inicial)
        
        print(f"‚úÖ Popula√ß√£o inicial criada:")
        print(f"   Melhor fitness inicial: {melhor_fitness_inicial}")
        print(f"   Fitness m√©dio inicial: {media_fitness_inicial:.1f}")
        print(f"   Aulas no melhor indiv√≠duo: {len(populacao[fitness_inicial.index(melhor_fitness_inicial)])}")
        
        return populacao

    def selecao_torneio(self, populacao, k=3):
        """üèÜ Sele√ß√£o por torneio"""
        fitness_populacao = [self.calcular_fitness_corrigido(ind) for ind in populacao]
        
        selecionados = []
        for _ in range(len(populacao)):
            # Selecionar k indiv√≠duos aleat√≥rios
            indices_torneio = random.sample(range(len(populacao)), k)
            
            # Encontrar o melhor (menor fitness)
            melhor_idx = min(indices_torneio, key=lambda i: fitness_populacao[i])
            selecionados.append(populacao[melhor_idx].copy())
        
        return selecionados

    def crossover_baseado_ordem(self, pai1, pai2):
        """üß¨ Crossover preservando estrutura"""
        if random.random() > self.taxa_crossover:
            return pai1.copy(), pai2.copy()
        
        if not pai1 or not pai2:
            return pai1.copy(), pai2.copy()
        
        # Crossover simples: trocar metades
        ponto_corte = len(pai1) // 2
        
        filho1 = pai1[:ponto_corte] + pai2[ponto_corte:]
        filho2 = pai2[:ponto_corte] + pai1[ponto_corte:]
        
        return filho1, filho2

    def mutacao_flexivel(self, individuo):
        """üîÑ Muta√ß√£o flex√≠vel"""
        if random.random() > self.taxa_mutacao or not individuo:
            return individuo
        
        # Escolher gene aleat√≥rio para mutar
        idx_gene = random.randint(0, len(individuo) - 1)
        gene = individuo[idx_gene].copy()
        
        # Tipo de muta√ß√£o aleat√≥ria
        tipo_mutacao = random.choice(['professor', 'sala', 'horario', 'dia'])
        
        if tipo_mutacao == 'professor':
            # Trocar professor (preferir habilitado)
            gene['professor'] = self.escolher_professor_habilitado_flexivel(gene['nome_disciplina'])
        
        elif tipo_mutacao == 'sala':
            # Trocar sala aleat√≥ria
            gene['sala'] = random.choice(self.salas['CODSALA'].tolist())
        
        elif tipo_mutacao == 'horario':
            # Trocar hor√°rio
            gene['horario'] = random.choice(self.horarios_noturnos)
        
        elif tipo_mutacao == 'dia':
            # Trocar dia
            gene['dia'] = random.choice(self.dias_semana)
        
        # Aplicar muta√ß√£o
        individuo[idx_gene] = gene
        return individuo

    def evoluir_populacao(self, populacao_inicial):
        """üöÄ Evolu√ß√£o da popula√ß√£o com m√©todo corrigido"""
        populacao = populacao_inicial.copy()
        
        print(f"\nüöÄ Iniciando evolu√ß√£o com {len(populacao)} indiv√≠duos...")
        
        for geracao in range(self.max_geracoes):
            # Calcular fitness da popula√ß√£o
            fitness_populacao = [self.calcular_fitness_corrigido(ind) for ind in populacao]
            
            # Encontrar melhor indiv√≠duo
            melhor_fitness_geracao = min(fitness_populacao)
            idx_melhor = fitness_populacao.index(melhor_fitness_geracao)
            melhor_individuo_geracao = populacao[idx_melhor].copy()
            
            # Atualizar hist√≥rico
            self.historico_fitness.append(melhor_fitness_geracao)
            
            # Verificar se melhorou
            if melhor_fitness_geracao < self.melhor_fitness:
                self.melhor_fitness = melhor_fitness_geracao
                self.melhor_solucao = melhor_individuo_geracao.copy()
                self.geracoes_sem_melhoria = 0
            else:
                self.geracoes_sem_melhoria += 1
            
            # Mostrar progresso
            if geracao % 25 == 0:
                print(f"Gera√ß√£o {geracao}: Melhor Fitness = {melhor_fitness_geracao}")
            
            # Crit√©rio de parada
            if (self.geracoes_sem_melhoria >= self.max_geracoes_sem_melhoria or 
                melhor_fitness_geracao == 0):
                print(f"Parada por converg√™ncia na gera√ß√£o {geracao}")
                break
            
            # Criar nova popula√ß√£o
            nova_populacao = []
            
            # Elitismo: manter os melhores
            num_elite = int(len(populacao) * self.taxa_elitismo)
            indices_ordenados = sorted(range(len(fitness_populacao)), key=lambda i: fitness_populacao[i])
            
            for i in range(num_elite):
                nova_populacao.append(populacao[indices_ordenados[i]].copy())
            
            # Completar popula√ß√£o com sele√ß√£o, crossover e muta√ß√£o
            while len(nova_populacao) < len(populacao):
                # Sele√ß√£o
                pais = self.selecao_torneio([populacao[i] for i in indices_ordenados[:len(populacao)//2]], k=3)
                
                if len(pais) >= 2:
                    pai1, pai2 = random.sample(pais, 2)
                    
                    # Crossover
                    filho1, filho2 = self.crossover_baseado_ordem(pai1, pai2)
                    
                    # Muta√ß√£o
                    filho1 = self.mutacao_flexivel(filho1)
                    filho2 = self.mutacao_flexivel(filho2)
                    
                    # Adicionar filhos
                    if len(nova_populacao) < len(populacao):
                        nova_populacao.append(filho1)
                    if len(nova_populacao) < len(populacao):
                        nova_populacao.append(filho2)
            
            populacao = nova_populacao
        
        return self.melhor_solucao

    def gerar_relatorio_resultado(self, solucao):
        """üìã Gera relat√≥rio detalhado dos resultados"""
        if not solucao:
            print("‚ùå Nenhuma solu√ß√£o para reportar")
            return
        
        fitness_final = self.calcular_fitness_corrigido(solucao)
        
        # Estat√≠sticas b√°sicas
        total_aulas_alocadas = len(solucao)
        salas_utilizadas = len(set(aula['sala'] for aula in solucao))
        professores_ativos = len(set(aula['professor'] for aula in solucao))
        
        # Calcular taxa de ocupa√ß√£o
        slots_utilizados = total_aulas_alocadas
        slots_disponiveis = len(self.dias_semana) * len(self.horarios_noturnos) * salas_utilizadas
        taxa_ocupacao = (slots_utilizados / slots_disponiveis) * 100 if slots_disponiveis > 0 else 0
        
        # Classificar qualidade
        if fitness_final == 0:
            qualidade = "Perfeita"
        elif fitness_final < 500:
            qualidade = "Excelente"
        elif fitness_final < 2000:
            qualidade = "Boa"
        elif fitness_final < 5000:
            qualidade = "Regular"
        else:
            qualidade = "Precisa melhorar"
        
        print(f"\nüìã RELAT√ìRIO DA SOLU√á√ÉO:")
        print(f"   Fitness final: {fitness_final}")
        print(f"   Total de aulas: {total_aulas_alocadas}")
        print(f"   Salas utilizadas: {salas_utilizadas}")
        print(f"   Professores ativos: {professores_ativos}")
        print(f"   Taxa de ocupa√ß√£o: {taxa_ocupacao:.1f}%")
        print(f"   Qualidade: {qualidade}")
        
        return {
            'fitness': fitness_final,
            'total_aulas': total_aulas_alocadas,
            'salas_utilizadas': salas_utilizadas,
            'professores_ativos': professores_ativos,
            'taxa_ocupacao': taxa_ocupacao,
            'qualidade': qualidade
        }

    def salvar_resultados(self, solucao, relatorio):
        """üíæ Salva resultados em arquivos"""
        try:
            # Criar pasta resultados se n√£o existir
            if not os.path.exists('resultados'):
                os.makedirs('resultados')
            
            # Salvar hor√°rio em CSV
            if solucao:
                df_horario = pd.DataFrame(solucao)
                df_horario.to_csv('resultados/horario_otimizado.csv', index=False)
                print("Hor√°rio salvo em: resultados/horario_otimizado.csv")
            
            # Salvar relat√≥rio em JSON
            relatorio_completo = {
                'timestamp': datetime.now().isoformat(),
                'parametros_algoritmo': {
                    'tamanho_populacao': self.tamanho_populacao,
                    'taxa_mutacao': self.taxa_mutacao,
                    'max_geracoes': self.max_geracoes
                },
                'resultados': relatorio,
                'historico_fitness': self.historico_fitness
            }
            
            with open('resultados/relatorio_otimizacao.json', 'w') as f:
                json.dump(relatorio_completo, f, indent=2, ensure_ascii=False)
            print("Relat√≥rio salvo em: resultados/relatorio_otimizacao.json")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao salvar resultados: {e}")

    def mostrar_horario_formatado(self, solucao, num_aulas=15):
        """üìÖ Mostra hor√°rio formatado"""
        if not solucao:
            print("‚ùå Nenhuma solu√ß√£o para mostrar")
            return
        
        print(f"HOR√ÅRIO OTIMIZADO (primeiras {num_aulas} aulas):")
        
        # Ordenar por dia e hor√°rio
        solucao_ordenada = sorted(solucao, key=lambda x: (
            self.dias_semana.index(x['dia']),
            self.horarios_noturnos.index(x['horario']),
            x['turma']
        ))
        
        # Cabe√ßalho
        print(f"{'Dia':>8} {'Hor√°rio':>7} {'Turma':>10} {'Disciplina':>50} {'Professor':>15} {'Sala':>5} {'Aula':>5}")
        print("-" * 100)
        
        # Mostrar aulas
        for i, aula in enumerate(solucao_ordenada[:num_aulas]):
            disciplina_nome = aula['nome_disciplina'][:45] if len(aula['nome_disciplina']) > 45 else aula['nome_disciplina']
            
            # Buscar nome do professor
            prof_info = self.professores[self.professores['CODPROF'] == aula['professor']]
            prof_nome = prof_info.iloc[0]['NOME'] if not prof_info.empty else f"Prof{aula['professor']}"
            prof_nome_formatado = f"{prof_nome} ({aula['professor']})"
            
            print(f"{aula['dia']:>8} {aula['horario']:>7} {aula['turma']:>10} {disciplina_nome:>50} {prof_nome_formatado:>15} {aula['sala']:>5} {aula['aula_numero']:>5}")

    def gerar_estatisticas_turmas(self, solucao):
        """üìä Gera estat√≠sticas por turma"""
        if not solucao:
            return
        
        print("DISTRIBUI√á√ÉO POR TURMA:")
        turmas_contagem = {}
        
        for aula in solucao:
            turma = aula['turma']
            turmas_contagem[turma] = turmas_contagem.get(turma, 0) + 1
        
        for turma, quantidade in sorted(turmas_contagem.items()):
            print(f"   {turma}: {quantidade} aulas distribu√≠das")

    def executar_otimizacao_corrigida(self):
        """üöÄ M√©todo principal que executa toda a otimiza√ß√£o corrigida"""
        
        print("üéì ALGORITMO GEN√âTICO COM CORRE√á√ïES APLICADAS")
        print("=" * 60)
        
        inicio_tempo = time.time()
        
        # Etapa 1: Carregamento e processamento corrigido
        if not self.carregar_e_processar_dados_corrigidos():
            print("‚ùå Otimiza√ß√£o cancelada devido a problemas nos dados")
            return None
        
        # Etapa 2: Cria√ß√£o de popula√ß√£o inicial
        populacao_inicial = self.criar_populacao_inicial()
        
        # Etapa 3: Evolu√ß√£o
        print("\nIniciando otimiza√ß√£o...")
        melhor_solucao = self.evoluir_populacao(populacao_inicial)
        
        # Etapa 4: Resultados
        tempo_execucao = time.time() - inicio_tempo
        tempo_formatado = str(timedelta(seconds=int(tempo_execucao)))
        
        print("\n" + "=" * 50)
        print("üìà RESULTADOS DA OTIMIZA√á√ÉO")
        print("=" * 50)
        print(f"‚è±Tempo de execu√ß√£o: {tempo_formatado}")
        print(f"Fitness final: {self.melhor_fitness}")
        
        if melhor_solucao:
            # Gerar relat√≥rio
            relatorio = self.gerar_relatorio_resultado(melhor_solucao)
            
            # Mostrar hor√°rio
            self.mostrar_horario_formatado(melhor_solucao)
            
            # Estat√≠sticas por turma
            self.gerar_estatisticas_turmas(melhor_solucao)
            
            # Salvar resultados
            self.salvar_resultados(melhor_solucao, relatorio)
            
            print("=" * 50)
            print("OTIMIZA√á√ÉO CONCLU√çDA!")
            print("=" * 50)
            
            # Avaliar qualidade da solu√ß√£o
            if self.melhor_fitness == 0:
                print("üéâ PERFEITO! Solu√ß√£o √≥tima encontrada!")
            elif self.melhor_fitness < 500:
                print("‚úÖ EXCELENTE! Solu√ß√£o de alta qualidade!")
            elif self.melhor_fitness < 2000:
                print("üëç BOM! Solu√ß√£o aceit√°vel encontrada!")
            elif self.melhor_fitness < 5000:
                print("‚ö†Ô∏è REGULAR! Solu√ß√£o com alguns conflitos")
                print("üí° Tente executar novamente ou ajustar par√¢metros")
            else:
                print("‚ùå ATEN√á√ÉO! Solu√ß√£o com muitos conflitos")
                print("Execute novamente ou ajuste dados")
            
            print(f"Taxa de ocupa√ß√£o: {relatorio['taxa_ocupacao']:.1f}%")
            print("RESUMO FINAL:")
            print(f"   ‚Ä¢ Hor√°rios: 18:50-22:20 (4 per√≠odos de 50min)")
            print(f"   ‚Ä¢ Restri√ß√µes: Disciplinas 2+ aulas distribu√≠das")
            print(f"   ‚Ä¢ Ocupa√ß√£o: {relatorio['taxa_ocupacao']:.1f}% dos slots")
            print(f"   ‚Ä¢ Aulas: {relatorio['total_aulas']} alocadas")
            print(f"   ‚Ä¢ Qualidade: {relatorio['qualidade']}")
            
        else:
            print("‚ùå Nenhuma solu√ß√£o encontrada")
            print("üí° Tente ajustar par√¢metros ou verificar dados")
        
        print("PROJETO FINALIZADO!")
        print("Arquivos gerados na pasta 'resultados/'")
        print("Algoritmo respeitando todas as restri√ß√µes")
        
        return melhor_solucao

    def plotar_convergencia(self):
        """üìà Plota gr√°fico de converg√™ncia"""
        try:
            if not self.historico_fitness:
                print("‚ö†Ô∏è Nenhum hist√≥rico de fitness para plotar")
                return
            
            plt.figure(figsize=(10, 6))
            plt.plot(self.historico_fitness, 'b-', linewidth=2)
            plt.title('Converg√™ncia do Algoritmo Gen√©tico', fontsize=14, fontweight='bold')
            plt.xlabel('Gera√ß√£o')
            plt.ylabel('Fitness (menor √© melhor)')
            plt.grid(True, alpha=0.3)
            plt.tight_layout()
            
            # Salvar gr√°fico
            if not os.path.exists('resultados'):
                os.makedirs('resultados')
            
            plt.savefig('resultados/convergencia.png', dpi=300, bbox_inches='tight')
            plt.show()
            print("üìä Gr√°fico de converg√™ncia salvo em: resultados/convergencia.png")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao plotar converg√™ncia: {e}")

def main():
    """üöÄ Fun√ß√£o principal do programa"""
    
    print("üéì FIAP TECH CHALLENGE - ALGORITMO GEN√âTICO CORRIGIDO")
    print("=" * 60)
    print("üìä Vers√£o com corre√ß√µes para resolver FITNESS = 28800")
    print("üéØ Objetivo: Otimizar hor√°rios acad√™micos noturnos")
    print("‚ö° Implementa corre√ß√µes nos dados e algoritmo")
    print()
    
    try:
        # Criar inst√¢ncia do otimizador
        otimizador = GeneticScheduleOptimizer()
        
        # Executar otimiza√ß√£o completa
        resultado = otimizador.executar_otimizacao_corrigida()
        
        # Plotar converg√™ncia se houver dados
        if otimizador.historico_fitness:
            resposta = input("\nDeseja plotar gr√°fico de converg√™ncia? (s/n): ").lower()
            if resposta == 's':
                otimizador.plotar_convergencia()
        
        print("\n‚úÖ Execu√ß√£o conclu√≠da com sucesso!")
        
        if resultado:
            print(f"üìä Solu√ß√£o encontrada com fitness: {otimizador.melhor_fitness}")
            print(f"üìã {len(resultado)} aulas alocadas")
            print("üìÅ Resultados salvos na pasta 'resultados/'")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Execu√ß√£o interrompida pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro durante execu√ß√£o: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
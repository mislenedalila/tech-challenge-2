#!/usr/bin/env python3
"""
TECH CHALLENGE - FASE 2
Sistema de Otimiza√ß√£o de Hor√°rios Acad√™micos com Algoritmos Gen√©ticos

Autor: [Seu Nome]
Data: Julho 2025

Este script executa o sistema completo de otimiza√ß√£o de hor√°rios usando AG.
"""

import sys
import os
import time
from datetime import datetime

# Importar m√≥dulos do projeto
try:
    from genetic_scheduler import ScheduleGA
    from visualization_script import (
        executar_analise_completa, 
        gerar_relatorio_completo,
        salvar_horario_excel
    )
    from parameter_optimization import (
        executar_teste_rapido,
        testar_config_especifica
    )
except ImportError as e:
    print(f"‚ùå Erro ao importar m√≥dulos: {e}")
    print("Certifique-se de que todos os arquivos est√£o no mesmo diret√≥rio.")
    sys.exit(1)

def verificar_arquivos_dados():
    """Verifica se todos os arquivos de dados est√£o presentes"""
    pasta_dados = 'dados/'
    arquivos_necessarios = [
        'disciplinas.xlsx',
        'professores.xlsx', 
        'salas.xlsx',
        'turmas.xlsx',
        'disponibilidade.xlsx'
    ]
    
    # Verificar se a pasta dados existe
    if not os.path.exists(pasta_dados):
        print(f"‚ùå Pasta '{pasta_dados}' n√£o encontrada!")
        print("Crie a pasta 'dados/' e coloque os arquivos Excel dentro dela.")
        return False
    
    arquivos_faltando = []
    for arquivo in arquivos_necessarios:
        caminho_completo = os.path.join(pasta_dados, arquivo)
        if not os.path.exists(caminho_completo):
            arquivos_faltando.append(arquivo)
    
    if arquivos_faltando:
        print(f"‚ùå Arquivos de dados faltando na pasta '{pasta_dados}': {', '.join(arquivos_faltando)}")
        print("Certifique-se de que todos os arquivos Excel est√£o na pasta 'dados/'.")
        return False
    
    print("‚úÖ Todos os arquivos de dados encontrados na pasta 'dados/'.")
    return True

def executar_demo_basico():
    """Executa uma demonstra√ß√£o b√°sica do algoritmo"""
    print("\n" + "="*60)
    print("üöÄ DEMONSTRA√á√ÉO B√ÅSICA - ALGORITMO GEN√âTICO")
    print("="*60)
    
    # Configurar AG com par√¢metros otimizados para demonstra√ß√£o
    ga = ScheduleGA()
    ga.populacao_size = 30  # Menor para execu√ß√£o mais r√°pida
    ga.geracoes = 200      # Suficiente para converg√™ncia
    ga.taxa_mutacao = 0.12
    ga.taxa_crossover = 0.75
    
    print("Configura√ß√£o do AG:")
    print(f"  ‚Ä¢ Popula√ß√£o: {ga.populacao_size} indiv√≠duos")
    print(f"  ‚Ä¢ Gera√ß√µes: {ga.geracoes} m√°ximo")
    print(f"  ‚Ä¢ Taxa de muta√ß√£o: {ga.taxa_mutacao}")
    print(f"  ‚Ä¢ Taxa de crossover: {ga.taxa_crossover}")
    
    inicio = time.time()
    melhor_solucao, fitness, historico = ga.executar()
    tempo_total = time.time() - inicio
    
    print(f"\n‚è±Ô∏è  Tempo de execu√ß√£o: {tempo_total:.2f} segundos")
    print(f"üéØ Fitness final: {fitness:.2f}")
    print(f"üìà Melhoria: {historico[-1] - historico[0]:.2f}")
    
    # Gerar relat√≥rio resumido
    print("\n" + "="*60)
    print("üìä RELAT√ìRIO RESUMIDO")
    print("="*60)
    gerar_relatorio_completo(melhor_solucao, fitness, historico, ga)
    
    # Exibir hor√°rio
    ga.exibir_horario(melhor_solucao)
    
    return melhor_solucao, fitness, historico, ga

def executar_demo_completo():
    """Executa an√°lise completa com todos os gr√°ficos"""
    print("\n" + "="*60)
    print("üî¨ AN√ÅLISE COMPLETA COM VISUALIZA√á√ïES")
    print("="*60)
    print("Isso pode demorar alguns minutos...")
    
    try:
        solucao, fitness, historico, ga_instance, df_prof = executar_analise_completa()
        
        # Salvar resultados
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"horario_otimizado_{timestamp}.xlsx"
        caminho_salvo = salvar_horario_excel(solucao, ga_instance, filename)
        
        print(f"\n‚úÖ An√°lise completa finalizada!")
        print(f"üìÑ Resultados salvos em: {caminho_salvo}")
        
        return solucao, fitness, historico, ga_instance
        
    except Exception as e:
        print(f"‚ùå Erro durante an√°lise completa: {e}")
        return None, None, None, None

def executar_otimizacao_parametros():
    """Executa otimiza√ß√£o de par√¢metros"""
    print("\n" + "="*60)
    print("‚öôÔ∏è  OTIMIZA√á√ÉO DE PAR√ÇMETROS")
    print("="*60)
    
    print("Op√ß√µes dispon√≠veis:")
    print("1. Teste r√°pido (5-10 minutos)")
    print("2. Configura√ß√£o espec√≠fica (2-3 minutos)")
    
    try:
        opcao = input("Escolha uma op√ß√£o (1-2): ").strip()
        
        if opcao == "1":
            print("\nExecutando teste r√°pido...")
            melhor_config = executar_teste_rapido()
            return melhor_config
            
        elif opcao == "2":
            print("\nTestando configura√ß√£o padr√£o...")
            resultados = testar_config_especifica(
                populacao_size=50,
                taxa_mutacao=0.12,
                taxa_crossover=0.75,
                tamanho_torneio=3,
                runs=3
            )
            return resultados
            
        else:
            print("Op√ß√£o inv√°lida!")
            return None
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Otimiza√ß√£o cancelada pelo usu√°rio.")
        return None

def comparar_com_metodo_convencional():
    """Simula compara√ß√£o com m√©todo convencional"""
    print("\n" + "="*60)
    print("üìä COMPARA√á√ÉO: AG vs M√âTODO CONVENCIONAL")
    print("="*60)
    
    # Simular m√©todo convencional (aloca√ß√£o sequencial simples)
    print("M√©todo Convencional (Simulado):")
    print("  ‚Ä¢ Tempo de elabora√ß√£o: ~4-6 horas (manual)")
    print("  ‚Ä¢ Conflitos t√≠picos: 5-15")
    print("  ‚Ä¢ Distribui√ß√£o: Irregular")
    print("  ‚Ä¢ Satisfa√ß√£o: 60-70%")
    
    # Executar AG
    print("\nExecutando Algoritmo Gen√©tico...")
    melhor_solucao, fitness, historico, ga = executar_demo_basico()
    
    # Calcular m√©tricas do AG
    from visualization_script import verificar_conflitos
    conflitos = verificar_conflitos(melhor_solucao, ga)
    total_conflitos = (len(conflitos['professor']) + 
                      len(conflitos['sala']) + 
                      len(conflitos['disponibilidade']))
    
    print("\nAlgoritmo Gen√©tico:")
    print(f"  ‚Ä¢ Tempo de execu√ß√£o: ~1-2 minutos (autom√°tico)")
    print(f"  ‚Ä¢ Conflitos encontrados: {total_conflitos}")
    print(f"  ‚Ä¢ Fitness: {fitness:.2f}/10000")
    print(f"  ‚Ä¢ Satisfa√ß√£o estimada: {(fitness/10000)*100:.1f}%")
    
    # Resumo da compara√ß√£o
    print("\nüèÜ VANTAGENS DO ALGORITMO GEN√âTICO:")
    print("  ‚úÖ Automatiza√ß√£o completa do processo")
    print("  ‚úÖ Redu√ß√£o dr√°stica do tempo necess√°rio")
    print("  ‚úÖ Minimiza√ß√£o de conflitos")
    print("  ‚úÖ Otimiza√ß√£o simult√¢nea de m√∫ltiplos objetivos")
    print("  ‚úÖ Reprodutibilidade e escalabilidade")

def menu_principal():
    """Menu principal do sistema"""
    while True:
        print("\n" + "="*60)
        print("üéì SISTEMA DE HOR√ÅRIOS ACAD√äMICOS - TECH CHALLENGE")
        print("="*60)
        print("1. Demonstra√ß√£o b√°sica (r√°pida)")
        print("2. An√°lise completa com visualiza√ß√µes")
        print("3. Otimiza√ß√£o de par√¢metros")
        print("4. Compara√ß√£o AG vs M√©todo Convencional")
        print("5. Informa√ß√µes do projeto")
        print("0. Sair")
        
        try:
            opcao = input("\nEscolha uma op√ß√£o (0-5): ").strip()
            
            if opcao == "1":
                executar_demo_basico()
                
            elif opcao == "2":
                executar_demo_completo()
                
            elif opcao == "3":
                executar_otimizacao_parametros()
                
            elif opcao == "4":
                comparar_com_metodo_convencional()
                
            elif opcao == "5":
                mostrar_informacoes_projeto()
                
            elif opcao == "0":
                print("\nüëã Obrigado por usar o sistema! Bom projeto!")
                break
                
            else:
                print("‚ùå Op√ß√£o inv√°lida! Tente novamente.")
                
        except KeyboardInterrupt:
            print("\n\nüëã Sistema encerrado pelo usu√°rio.")
            break
        except Exception as e:
            print(f"‚ùå Erro inesperado: {e}")

def mostrar_informacoes_projeto():
    """Mostra informa√ß√µes sobre o projeto"""
    print("\n" + "="*60)
    print("‚ÑπÔ∏è  INFORMA√á√ïES DO PROJETO")
    print("="*60)
    print("Projeto: Sistema de Hor√°rios com Algoritmos Gen√©ticos")
    print("Curso: P√≥s-Tech - IA para Devs")
    print("Fase: Tech Challenge 2")
    print("Data: Julho 2025")
    print()
    print("üéØ Objetivos:")
    print("  ‚Ä¢ Implementar AG para otimiza√ß√£o de hor√°rios")
    print("  ‚Ä¢ Resolver problema real de aloca√ß√£o de recursos")
    print("  ‚Ä¢ Demonstrar efic√°cia comparada a m√©todos convencionais")
    print()
    print("üõ†Ô∏è  Tecnologias utilizadas:")
    print("  ‚Ä¢ Python 3.8+")
    print("  ‚Ä¢ Pandas, NumPy (manipula√ß√£o de dados)")
    print("  ‚Ä¢ Matplotlib, Seaborn (visualiza√ß√µes)")
    print("  ‚Ä¢ OpenPyXL (manipula√ß√£o de Excel)")
    print()
    print("üìä Resultados esperados:")
    print("  ‚Ä¢ Redu√ß√£o de conflitos em hor√°rios")
    print("  ‚Ä¢ Automatiza√ß√£o do processo manual")
    print("  ‚Ä¢ Otimiza√ß√£o de m√∫ltiplos objetivos simultaneamente")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Iniciando Sistema de Hor√°rios com Algoritmos Gen√©ticos")
    print(f"üìÖ Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    
    # Verificar arquivos
    if not verificar_arquivos_dados():
        print("\n‚ùå N√£o √© poss√≠vel continuar sem os arquivos de dados.")
        return
    
    # Verificar depend√™ncias
    try:
        import pandas as pd
        import numpy as np
        import matplotlib.pyplot as plt
        print("‚úÖ Todas as depend√™ncias est√£o dispon√≠veis.")
    except ImportError as e:
        print(f"‚ùå Depend√™ncia faltando: {e}")
        print("Instale com: pip install pandas numpy matplotlib seaborn openpyxl")
        return
    
    # Executar menu principal
    menu_principal()

if __name__ == "__main__":
    main()
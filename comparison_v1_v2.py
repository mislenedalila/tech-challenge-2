import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import time
from genetic_scheduler import ScheduleGA  # V1 - Penaliza√ß√£o + Lista
from genetic_scheduler_v2 import ScheduleGA_V2  # V2 - Pontua√ß√£o + Agenda

def comparar_abordagens():
    """Compara as duas abordagens: V1 (Penaliza√ß√£o) vs V2 (Pontua√ß√£o)"""
    
    print("üî¨ COMPARA√á√ÉO: PENALIZA√á√ÉO vs PONTUA√á√ÉO")
    print("="*60)
    
    resultados = {
        'abordagem': [],
        'tempo_execucao': [],
        'fitness_final': [],
        'fitness_normalizado': [],
        'convergencia_geracao': [],
        'disciplinas_completas': [],
        'disponibilidade_respeitada': []
    }
    
    # Testar V1 - Penaliza√ß√£o com Lista
    print("\nüî∏ Testando V1 - Penaliza√ß√£o com Lista de Eventos")
    print("-" * 50)
    
    start_time = time.time()
    ga_v1 = ScheduleGA()
    ga_v1.populacao_size = 30
    ga_v1.geracoes = 200
    
    try:
        solucao_v1, fitness_v1, historico_v1 = ga_v1.executar()
        tempo_v1 = time.time() - start_time
        
        # Analisar resultados V1
        stats_v1 = analisar_solucao_v1(solucao_v1, ga_v1)
        
        resultados['abordagem'].append('V1 - Penaliza√ß√£o')
        resultados['tempo_execucao'].append(tempo_v1)
        resultados['fitness_final'].append(fitness_v1)
        resultados['fitness_normalizado'].append(fitness_v1 / 10000)  # Normalizar para 0-1
        resultados['convergencia_geracao'].append(len(historico_v1))
        resultados['disciplinas_completas'].append(stats_v1['disciplinas_completas'])
        resultados['disponibilidade_respeitada'].append(stats_v1['disponibilidade_respeitada'])
        
        print(f"‚úÖ V1 conclu√≠do - Fitness: {fitness_v1:.0f}, Tempo: {tempo_v1:.1f}s")
        
    except Exception as e:
        print(f"‚ùå Erro no V1: {e}")
        return None
    
    # Testar V2 - Pontua√ß√£o com Agenda
    print("\nüîπ Testando V2 - Pontua√ß√£o com Agenda (Matriz)")
    print("-" * 50)
    
    start_time = time.time()
    ga_v2 = ScheduleGA_V2()
    ga_v2.populacao_size = 30
    ga_v2.geracoes = 200
    
    try:
        agenda_v2, fitness_v2, historico_v2 = ga_v2.executar()
        tempo_v2 = time.time() - start_time
        
        # Analisar resultados V2
        stats_v2 = analisar_solucao_v2(agenda_v2, ga_v2)
        
        resultados['abordagem'].append('V2 - Pontua√ß√£o')
        resultados['tempo_execucao'].append(tempo_v2)
        resultados['fitness_final'].append(fitness_v2)
        resultados['fitness_normalizado'].append(fitness_v2 / 15000)  # Normalizar considerando pontua√ß√£o m√°xima estimada
        resultados['convergencia_geracao'].append(len(historico_v2))
        resultados['disciplinas_completas'].append(stats_v2['disciplinas_completas'])
        resultados['disponibilidade_respeitada'].append(stats_v2['disponibilidade_respeitada'])
        
        print(f"‚úÖ V2 conclu√≠do - Fitness: {fitness_v2:.0f}, Tempo: {tempo_v2:.1f}s")
        
    except Exception as e:
        print(f"‚ùå Erro no V2: {e}")
        return None
    
    # Gerar relat√≥rio comparativo
    gerar_relatorio_comparativo(resultados, historico_v1, historico_v2)
    
    # Plotar compara√ß√µes
    plotar_comparacao(resultados, historico_v1, historico_v2)
    
    return resultados, (solucao_v1, ga_v1), (agenda_v2, ga_v2)

def analisar_solucao_v1(cromossomo, ga):
    """Analisa estat√≠sticas da solu√ß√£o V1"""
    stats = {}
    
    # Contar disciplinas completas
    disciplina_count = {}
    for gene in cromossomo:
        disc = gene['disciplina']
        disciplina_count[disc] = disciplina_count.get(disc, 0) + 1
    
    disciplinas_completas = 0
    for disc_codigo, disciplina in ga.disciplinas.items():
        if disciplina_count.get(disc_codigo, 0) >= disciplina.carga_horaria:
            disciplinas_completas += 1
    
    stats['disciplinas_completas'] = disciplinas_completas / len(ga.disciplinas)
    
    # Verificar disponibilidade
    aulas_com_disponibilidade = 0
    total_aulas = len(cromossomo)
    
    for gene in cromossomo:
        professor = gene['professor']
        dia_nome = ga.dias[gene['dia']]
        horario_nome = ga.horarios[gene['horario']]
        
        if professor in ga.disponibilidades:
            for disp in ga.disponibilidades[professor]:
                if disp.dia == dia_nome and disp.horario == horario_nome:
                    aulas_com_disponibilidade += 1
                    break
    
    stats['disponibilidade_respeitada'] = aulas_com_disponibilidade / max(total_aulas, 1)
    
    return stats

def analisar_solucao_v2(agenda, ga):
    """Analisa estat√≠sticas da solu√ß√£o V2"""
    stats = {}
    
    # Contar disciplinas completas
    disciplina_count = {}
    total_aulas = 0
    
    for dia in range(ga.num_dias):
        for horario in range(ga.num_horarios):
            aula = agenda[dia, horario]
            if aula is not None:
                disc = aula.disciplina
                disciplina_count[disc] = disciplina_count.get(disc, 0) + 1
                total_aulas += 1
    
    disciplinas_completas = 0
    for disc_codigo, disciplina in ga.disciplinas.items():
        if disciplina_count.get(disc_codigo, 0) >= disciplina.carga_horaria:
            disciplinas_completas += 1
    
    stats['disciplinas_completas'] = disciplinas_completas / len(ga.disciplinas)
    
    # Verificar disponibilidade
    aulas_com_disponibilidade = 0
    
    for dia in range(ga.num_dias):
        for horario in range(ga.num_horarios):
            aula = agenda[dia, horario]
            if aula is not None:
                if ga._professor_disponivel(aula.professor, dia, horario):
                    aulas_com_disponibilidade += 1
    
    stats['disponibilidade_respeitada'] = aulas_com_disponibilidade / max(total_aulas, 1)
    
    return stats

def gerar_relatorio_comparativo(resultados, historico_v1, historico_v2):
    """Gera relat√≥rio detalhado da compara√ß√£o"""
    print("\n" + "="*80)
    print("üìä RELAT√ìRIO COMPARATIVO DETALHADO")
    print("="*80)
    
    df = pd.DataFrame(resultados)
    
    print("\nüèÜ M√âTRICAS PRINCIPAIS:")
    print("-" * 60)
    for i, row in df.iterrows():
        print(f"\n{row['abordagem']}:")
        print(f"  ‚è±Ô∏è  Tempo de execu√ß√£o: {row['tempo_execucao']:.2f} segundos")
        print(f"  üéØ Fitness final: {row['fitness_final']:.0f}")
        print(f"  üìä Fitness normalizado: {row['fitness_normalizado']:.2%}")
        print(f"  üîÑ Gera√ß√µes executadas: {row['convergencia_geracao']}")
        print(f"  ‚úÖ Disciplinas completas: {row['disciplinas_completas']:.1%}")
        print(f"  üìÖ Disponibilidade respeitada: {row['disponibilidade_respeitada']:.1%}")
    
    print("\n" + "="*80)
    print("üîç AN√ÅLISE COMPARATIVA")
    print("="*80)
    
    # Comparar m√©tricas
    v1_idx, v2_idx = 0, 1
    
    print(f"\n‚ö° VELOCIDADE:")
    if df.iloc[v1_idx]['tempo_execucao'] < df.iloc[v2_idx]['tempo_execucao']:
        diferenca = df.iloc[v2_idx]['tempo_execucao'] - df.iloc[v1_idx]['tempo_execucao']
        print(f"  üèÉ V1 foi {diferenca:.1f}s mais r√°pido")
    else:
        diferenca = df.iloc[v1_idx]['tempo_execucao'] - df.iloc[v2_idx]['tempo_execucao']
        print(f"  üèÉ V2 foi {diferenca:.1f}s mais r√°pido")
    
    print(f"\nüéØ QUALIDADE DA SOLU√á√ÉO:")
    if df.iloc[v1_idx]['fitness_normalizado'] > df.iloc[v2_idx]['fitness_normalizado']:
        print(f"  üèÜ V1 obteve melhor fitness normalizado")
    elif df.iloc[v2_idx]['fitness_normalizado'] > df.iloc[v1_idx]['fitness_normalizado']:
        print(f"  üèÜ V2 obteve melhor fitness normalizado")
    else:
        print(f"  ü§ù Empate no fitness normalizado")
    
    print(f"\nüìö COMPLETUDE DAS DISCIPLINAS:")
    if df.iloc[v1_idx]['disciplinas_completas'] > df.iloc[v2_idx]['disciplinas_completas']:
        print(f"  ‚úÖ V1 completou mais disciplinas")
    elif df.iloc[v2_idx]['disciplinas_completas'] > df.iloc[v1_idx]['disciplinas_completas']:
        print(f"  ‚úÖ V2 completou mais disciplinas")
    else:
        print(f"  ü§ù Ambos completaram o mesmo n√∫mero de disciplinas")
    
    print(f"\nüìÖ RESPEITO √Ä DISPONIBILIDADE:")
    if df.iloc[v1_idx]['disponibilidade_respeitada'] > df.iloc[v2_idx]['disponibilidade_respeitada']:
        print(f"  üë®‚Äçüè´ V1 respeitou melhor a disponibilidade dos professores")
    elif df.iloc[v2_idx]['disponibilidade_respeitada'] > df.iloc[v1_idx]['disponibilidade_respeitada']:
        print(f"  üë®‚Äçüè´ V2 respeitou melhor a disponibilidade dos professores")
    else:
        print(f"  ü§ù Ambos respeitaram igualmente a disponibilidade")

def plotar_comparacao(resultados, historico_v1, historico_v2):
    """Plota gr√°ficos comparativos"""
    fig, axes = plt.subplots(2, 2, figsize=(15, 10))
    fig.suptitle('Compara√ß√£o: Penaliza√ß√£o vs Pontua√ß√£o', fontsize=16, fontweight='bold')
    
    df = pd.DataFrame(resultados)
    
    # 1. Evolu√ß√£o do Fitness
    axes[0,0].plot(historico_v1, label='V1 - Penaliza√ß√£o', linewidth=2, alpha=0.8)
    # Normalizar V2 para compara√ß√£o visual
    historico_v2_norm = np.array(historico_v2) / max(historico_v2) * max(historico_v1)
    axes[0,0].plot(historico_v2_norm, label='V2 - Pontua√ß√£o (norm)', linewidth=2, alpha=0.8)
    axes[0,0].set_title('Evolu√ß√£o do Fitness')
    axes[0,0].set_xlabel('Gera√ß√£o')
    axes[0,0].set_ylabel('Fitness')
    axes[0,0].legend()
    axes[0,0].grid(True, alpha=0.3)
    
    # 2. Tempo de Execu√ß√£o
    axes[0,1].bar(df['abordagem'], df['tempo_execucao'], 
                  color=['skyblue', 'lightcoral'], alpha=0.8)
    axes[0,1].set_title('Tempo de Execu√ß√£o')
    axes[0,1].set_ylabel('Segundos')
    for i, v in enumerate(df['tempo_execucao']):
        axes[0,1].text(i, v + 0.1, f'{v:.1f}s', ha='center', fontweight='bold')
    
    # 3. Qualidade das Solu√ß√µes
    metricas = ['fitness_normalizado', 'disciplinas_completas', 'disponibilidade_respeitada']
    x = np.arange(len(metricas))
    width = 0.35
    
    v1_values = [df.iloc[0][m] for m in metricas]
    v2_values = [df.iloc[1][m] for m in metricas]
    
    axes[1,0].bar(x - width/2, v1_values, width, label='V1 - Penaliza√ß√£o', 
                  color='skyblue', alpha=0.8)
    axes[1,0].bar(x + width/2, v2_values, width, label='V2 - Pontua√ß√£o', 
                  color='lightcoral', alpha=0.8)
    
    axes[1,0].set_title('Compara√ß√£o de Qualidade')
    axes[1,0].set_ylabel('Score (0-1)')
    axes[1,0].set_xticks(x)
    axes[1,0].set_xticklabels(['Fitness\nNormalizado', 'Disciplinas\nCompletas', 'Disponibilidade\nRespeitada'])
    axes[1,0].legend()
    axes[1,0].grid(True, alpha=0.3)
    
    # 4. Converg√™ncia
    axes[1,1].plot(range(len(historico_v1)), historico_v1, 'b-', alpha=0.6, label='V1 - Penaliza√ß√£o')
    axes[1,1].plot(range(len(historico_v2)), historico_v2_norm, 'r-', alpha=0.6, label='V2 - Pontua√ß√£o')
    
    # Destacar √∫ltimas 50 gera√ß√µes
    if len(historico_v1) > 50:
        axes[1,1].plot(range(len(historico_v1)-50, len(historico_v1)), 
                      historico_v1[-50:], 'b-', linewidth=3, label='V1 - √öltimas 50')
    if len(historico_v2) > 50:
        axes[1,1].plot(range(len(historico_v2)-50, len(historico_v2)), 
                      historico_v2_norm[-50:], 'r-', linewidth=3, label='V2 - √öltimas 50')
    
    axes[1,1].set_title('An√°lise de Converg√™ncia')
    axes[1,1].set_xlabel('Gera√ß√£o')
    axes[1,1].set_ylabel('Fitness')
    axes[1,1].legend()
    axes[1,1].grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.show()

def demonstrar_diferencas_modelagem():
    """Demonstra as diferen√ßas conceituais entre as abordagens"""
    print("\n" + "="*80)
    print("üß† DIFEREN√áAS CONCEITUAIS ENTRE AS ABORDAGENS")
    print("="*80)
    
    print("\nüìã V1 - PENALIZA√á√ÉO COM LISTA DE EVENTOS:")
    print("-" * 50)
    print("‚úÖ Representa√ß√£o:")
    print("   ‚Ä¢ Cromossomo = Lista de genes")
    print("   ‚Ä¢ Gene = [disciplina, professor, dia, hor√°rio, sala]")
    print("   ‚Ä¢ Exemplo: [(MAT101, Prof1, 0, 1, S201), (FIS202, Prof2, 1, 0, S201)]")
    print()
    print("‚úÖ Fun√ß√£o de Fitness:")
    print("   ‚Ä¢ Inicia com valor alto (10.000)")
    print("   ‚Ä¢ Subtrai penalidades por viola√ß√µes")
    print("   ‚Ä¢ Fitness = 10.000 - penalidades + bonifica√ß√µes")
    print("   ‚Ä¢ Foco: Evitar problemas")
    print()
    print("‚úÖ Vantagens:")
    print("   ‚Ä¢ Flex√≠vel para diferentes tamanhos de problema")
    print("   ‚Ä¢ F√°cil adicionar/remover aulas")
    print("   ‚Ä¢ Crossover e muta√ß√£o mais diretos")
    print()
    print("‚úÖ Desvantagens:")
    print("   ‚Ä¢ Pode n√£o garantir todas as disciplinas")
    print("   ‚Ä¢ Fitness negativo confunde interpreta√ß√£o")
    print("   ‚Ä¢ Harder to ensure constraint satisfaction")
    
    print("\nüìÖ V2 - PONTUA√á√ÉO COM AGENDA (MATRIZ):")
    print("-" * 50)
    print("‚úÖ Representa√ß√£o:")
    print("   ‚Ä¢ Cromossomo = Matriz 5x4 (dias x hor√°rios)")
    print("   ‚Ä¢ C√©lula = Aula(disciplina, professor, sala) ou None")
    print("   ‚Ä¢ Visualiza√ß√£o direta como agenda")
    print()
    print("‚úÖ Fun√ß√£o de Fitness:")
    print("   ‚Ä¢ Inicia com zero")
    print("   ‚Ä¢ Soma pontua√ß√µes por qualidades")
    print("   ‚Ä¢ Fitness = Œ£(pontua√ß√µes positivas)")
    print("   ‚Ä¢ Foco: Maximizar benef√≠cios")
    print()
    print("‚úÖ Vantagens:")
    print("   ‚Ä¢ Garantia de atendimento das disciplinas")
    print("   ‚Ä¢ Interpreta√ß√£o intuitiva do fitness")
    print("   ‚Ä¢ Visualiza√ß√£o natural como hor√°rio")
    print("   ‚Ä¢ Reparo autom√°tico de solu√ß√µes")
    print()
    print("‚úÖ Desvantagens:")
    print("   ‚Ä¢ Estrutura fixa (5x4)")
    print("   ‚Ä¢ Crossover mais complexo")
    print("   ‚Ä¢ Pode ter desperd√≠cio de slots")
    
    print("\nüéØ RECOMENDA√á√ïES DE USO:")
    print("-" * 50)
    print("üî∏ Use V1 (Penaliza√ß√£o) quando:")
    print("   ‚Ä¢ Flexibilidade na estrutura √© importante")
    print("   ‚Ä¢ N√∫mero de aulas varia muito")
    print("   ‚Ä¢ Foco em evitar viola√ß√µes espec√≠ficas")
    print("   ‚Ä¢ Problema tem muitas restri√ß√µes hard")
    print()
    print("üîπ Use V2 (Pontua√ß√£o) quando:")
    print("   ‚Ä¢ Estrutura de hor√°rio √© fixa")
    print("   ‚Ä¢ Todas as disciplinas devem ser atendidas")
    print("   ‚Ä¢ Foco em otimiza√ß√£o de qualidade")
    print("   ‚Ä¢ Interpreta√ß√£o intuitiva √© importante")

def executar_comparacao_completa():
    """Executa compara√ß√£o completa entre as abordagens"""
    print("üî¨ COMPARA√á√ÉO COMPLETA: V1 vs V2")
    print("="*60)
    
    # Demonstrar diferen√ßas conceituais
    demonstrar_diferencas_modelagem()
    
    # Executar compara√ß√£o pr√°tica
    print("\nüöÄ Iniciando testes pr√°ticos...")
    try:
        resultados, (sol_v1, ga_v1), (agenda_v2, ga_v2) = comparar_abordagens()
        
        if resultados:
            print("\n‚úÖ Compara√ß√£o conclu√≠da com sucesso!")
            
            # Salvar resultados
            df_resultados = pd.DataFrame(resultados)
            
            # Criar pasta resultados se n√£o existir
            import os
            pasta_resultados = 'resultados'
            if not os.path.exists(pasta_resultados):
                os.makedirs(pasta_resultados)
            
            # Salvar compara√ß√£o
            filename = os.path.join(pasta_resultados, 'comparacao_v1_v2.xlsx')
            with pd.ExcelWriter(filename, engine='openpyxl') as writer:
                df_resultados.to_excel(writer, sheet_name='Resultados_Comparacao', index=False)
            
            print(f"üìÑ Resultados salvos em: {filename}")
            
            # Perguntar se quer ver as solu√ß√µes
            print("\nüîç Quer visualizar as solu√ß√µes encontradas?")
            opcao = input("Digite 's' para sim: ").strip().lower()
            
            if opcao == 's':
                print("\n" + "="*60)
                print("V1 - SOLU√á√ÉO COM PENALIZA√á√ÉO")
                print("="*60)
                ga_v1.exibir_horario(sol_v1)
                
                print("\n" + "="*60)
                print("V2 - SOLU√á√ÉO COM PONTUA√á√ÉO")
                print("="*60)
                ga_v2.exibir_agenda(agenda_v2)
        
        return resultados
        
    except Exception as e:
        print(f"‚ùå Erro durante compara√ß√£o: {e}")
        return None

# Execu√ß√£o principal
if __name__ == "__main__":
    executar_comparacao_completa()